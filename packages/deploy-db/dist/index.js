import regeneratorRuntime from"regenerator-runtime";import{loadDynamoDBClient}from'@crypto-aws/client';import{createCryptoItem}from'./create-crypto.js';import{createCommands,DynamoActionsConfiguration,TypesOfWrite}from'./inquirer-util.js';import{createTimestamp}from'./create-timestamp.js';function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}_asyncToGenerator(regeneratorRuntime.mark(function _callee(){var commandActions,client,initCommands,writeTypes,typesOfWrite,coinName,coinName1,coinApi,coinCompare;return regeneratorRuntime.wrap(function _callee$(_ctx){while(1)switch(_ctx.prev=_ctx.next){case 0:commandActions=Object.values(DynamoActionsConfiguration);_ctx.next=3;return loadDynamoDBClient();case 3:client=_ctx.sent;_ctx.next=6;return createCommands({type:'list',message:'Which [DynamoDB] commands should I excecute?',actions:commandActions});case 6:initCommands=_ctx.sent;if(initCommands.includes('delete')){}if(!initCommands.includes('write')){_ctx.next=40;break}writeTypes=Object.values(TypesOfWrite);_ctx.next=12;return createCommands({type:'list',message:'Write New Coin OR Update Timestamp Key?',actions:writeTypes});case 12:typesOfWrite=_ctx.sent;if(!typesOfWrite.includes('new-coin')){_ctx.next=18;break}_ctx.next=16;return createCommands({type:'list',message:'For which Coin?',actions:['bitcoin','xrp','dogecoin','ethereum']});case 16:coinName=_ctx.sent;return _ctx.abrupt("return",createCryptoItem(client,coinName));case 18:if(!typesOfWrite.includes('time-stamp')){_ctx.next=40;break}_ctx.next=21;return createCommands({type:'list',message:'For which Coin?',actions:['bitcoin','xrp','dogecoin','ethereum']});case 21:coinName1=_ctx.sent;_ctx.t0=coinName1;_ctx.next=_ctx.t0==='bitcoin'?27:_ctx.t0==='xrp'?30:_ctx.t0==='dogecoin'?33:_ctx.t0==='ethereum'?36:39;break;case 27:coinApi='BITSTAMP_SPOT_BTC_USD';coinCompare='BTC';return _ctx.abrupt("break",39);case 30:coinApi='BITSTAMP_SPOT_XRP_USD';coinCompare='XRP';return _ctx.abrupt("break",39);case 33:coinApi='BITSTAMP_SPOT_DOGE_USD';coinCompare='DOGE';return _ctx.abrupt("break",39);case 36:coinApi='BITSTAMP_SPOT_ETH_USD';coinCompare='ETH';return _ctx.abrupt("break",39);case 39:return _ctx.abrupt("return",createTimestamp(client,coinName1,coinApi,coinCompare));case 40:case"end":return _ctx.stop()}},_callee)}))()