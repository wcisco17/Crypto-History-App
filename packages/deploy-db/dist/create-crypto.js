import regeneratorRuntime from"regenerator-runtime";import{PutItemCommand}from'@crypto-aws/client';import{getLatestCoinMarketCapCryptoQuote}from'@crypto-api/db';function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}function _iterableToArrayLimit(arr,i){var _i=arr==null?null:typeof Symbol!=="undefined"&&arr[Symbol.iterator]||arr["@@iterator"];if(_i==null)return;var _arr=[];var _n=true;var _d=false;var _s,_e;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}export function createCryptoItem(client,coinName){return _createCryptoItem.apply(this,arguments)}function _createCryptoItem(){_createCryptoItem=_asyncToGenerator(regeneratorRuntime.mark(function _callee(client,coinName){var ref,cryptoCoin,ref1,cryptoCoinExist,data1,input,putItemResult;return regeneratorRuntime.wrap(function _callee$(_ctx){while(1)switch(_ctx.prev=_ctx.next){case 0:;_ctx.next=3;return getLatestCoinMarketCapCryptoQuote({symbol:{coinmarketcap:coinName}});case 3:cryptoCoin=_ctx.sent;if(!(((ref=cryptoCoin.status)===null||ref===void 0?void 0:ref.error_message.length)>=1)){_ctx.next=7;break};throw new Error("Reason: ".concat((ref1=cryptoCoin.status)===null||ref1===void 0?void 0:ref1.error_message));case 7:cryptoCoinExist=cryptoCoin;data1=JSON.stringify({Name:cryptoCoinExist.name,Slug:cryptoCoinExist.slug,CurrentPrice:cryptoCoinExist.quote.USD.price.toString(),PercentChange30d:cryptoCoinExist.quote.USD.percent_change_30d.toString(),LastUpdated:cryptoCoinExist.last_updated.toString()});input={TableName:'CryptoCurrency',Item:{PK:{S:"Crypto_".concat(cryptoCoinExist.name)},SK:{S:'Profile'},Data:{S:data1}}};_ctx.next=12;return client.send(new PutItemCommand(input));case 12:putItemResult=_ctx.sent;return _ctx.abrupt("return",Promise.all([cryptoCoin,putItemResult]).then(function(data){var _data=_slicedToArray(data,2),coinMarketCapData=_data[0],putItemData=_data[1];if(coinMarketCapData.id){console.log("Successfully retrieved data: [".concat(cryptoCoinExist.name,"]"))}if((putItemData===null||putItemData===void 0?void 0:putItemData.$metadata.httpStatusCode)==200){console.log("Successfully added item in ".concat(input.TableName))}return putItemData}).catch(function(err){console.error("Error in [createCryptoItem] reason: ",JSON.stringify(err));throw err}));case 14:case"end":return _ctx.stop()}},_callee)}));return _createCryptoItem.apply(this,arguments)}