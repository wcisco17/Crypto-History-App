function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}import regeneratorRuntime from"regenerator-runtime";import fetch from'node-fetch';import path from'path';import fs from'fs';import{fileURLToPath}from'url';import{dirname}from'path';import{loadS3Client}from'@crypto-aws/client';import*as process from'process';import dotenv from'dotenv';dotenv.config({path:'.env.local'});var __filename=fileURLToPath(import.meta.url);var __dirname=dirname(__filename);_asyncToGenerator(regeneratorRuntime.mark(function _callee1(){var pushToS3,file,testFileName,testFileExist,getSyntheticData1,_getSyntheticData,testData1,trainingLength,trainingSetData,i,isReady;return regeneratorRuntime.wrap(function _callee$(_ctx1){while(1)switch(_ctx1.prev=_ctx1.next){case 0:getSyntheticData1=function _getSyntheticData1(){return _getSyntheticData.apply(this,arguments)};_getSyntheticData=function __getSyntheticData(){_getSyntheticData=_asyncToGenerator(regeneratorRuntime.mark(function _callee(){var result,getSyntheticData,data,content;return regeneratorRuntime.wrap(function _callee$(_ctx){while(1)switch(_ctx.prev=_ctx.next){case 0:;if(testFileExist){_ctx.next=21;break}_ctx.prev=2;console.log('reading from [api]...');_ctx.next=6;return fetch(process.env.SYTHETIC_API,{method:'get'});case 6:getSyntheticData=_ctx.sent;if(!getSyntheticData.ok){_ctx.next=13;break}_ctx.next=10;return getSyntheticData.json();case 10:data=_ctx.sent;fs.writeFileSync(testFileName,JSON.stringify(data));result=data;case 13:_ctx.next=19;break;case 15:_ctx.prev=15;_ctx.t0=_ctx["catch"](2);result=undefined;throw new Error("[getSyntheticData] Reason: ".concat(_ctx.t0));case 19:_ctx.next=22;break;case 21:{console.log('reading safely from file...');content=fs.readFileSync(testFileName);result=JSON.parse(content.toString('utf-8'))}case 22:return _ctx.abrupt("return",result);case 23:case"end":return _ctx.stop()}},_callee,null,[[2,15]])}));return _getSyntheticData.apply(this,arguments)};pushToS3=function pushToS3(client,testData,trainingData){if(client){var params=[];params.push({Bucket:process.env.AWS_S3_BUCKET_SYTHETIC_DATA,Key:'test_data.json',Body:JSON.stringify(testData)},{Bucket:process.env.AWS_S3_BUCKET_SYTHETIC_DATA,Key:'training_data.json',Body:JSON.stringify(trainingData)});params.map(function(param){client.putObject(param,function(err,data){if(err)throw new Error("[pushToS3] Reason: ".concat(err));if(data)console.info("Successfully added ".concat(param.Key))})})}};file=__dirname.replace('dist','src');testFileName=path.join(file,'data/test_data.json');testFileExist=fs.existsSync(testFileName);;_ctx1.next=10;return getSyntheticData1();case 10:testData1=_ctx1.sent;if(!testData1){_ctx1.next=25;break}trainingLength=testData1.target.length*.3;trainingSetData={start:testData1.start,target:new Array(trainingLength)};for(i=trainingLength;i<testData1.target.length;i++)trainingSetData.target[i]=testData1.target[i];trainingSetData.target=trainingSetData.target.filter(function(item){return item!=null});isReady=testFileExist&&trainingSetData.target.length>=trainingLength;if(!isReady){_ctx1.next=25;break}_ctx1.t0=pushToS3;_ctx1.next=21;return loadS3Client();case 21:_ctx1.t1=_ctx1.sent;_ctx1.t2=testData1;_ctx1.t3=trainingSetData;(0,_ctx1.t0)(_ctx1.t1,_ctx1.t2,_ctx1.t3);case 25:case"end":return _ctx1.stop()}},_callee1)}))()