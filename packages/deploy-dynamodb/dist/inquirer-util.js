import regeneratorRuntime from"regenerator-runtime";import inquirer from'inquirer';function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}export var DynamoActionsConfiguration=['write','get'];export var TypesOfWrite=['new-coin','time-stamp'];export function createCommands(_){return _createCommands.apply(this,arguments)}function _createCommands(){_createCommands=_asyncToGenerator(regeneratorRuntime.mark(function _callee(param){var actions,message,type,name,ref,selectCommand;return regeneratorRuntime.wrap(function _callee$(_ctx){while(1)switch(_ctx.prev=_ctx.next){case 0:actions=param.actions,message=param.message,type=param.type,name=param.name;_ctx.next=3;return inquirer.prompt([{type:type,name:typeof name==='undefined'?'command':name,message:message,choices:actions}]);case 3:ref=_ctx.sent;selectCommand=ref.command;return _ctx.abrupt("return",selectCommand);case 6:case"end":return _ctx.stop()}},_callee)}));return _createCommands.apply(this,arguments)}