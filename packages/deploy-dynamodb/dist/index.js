import regeneratorRuntime from"regenerator-runtime";import{loadDynamoDBClient}from'@crypto-aws/client';import{createCryptoItem}from'./create-crypto.js';import{createCommands,DynamoActionsConfiguration,TypesOfWrite}from'./inquirer-util.js';import{createNumerical}from'./create-numerical.js';import{convertToUnixEpoch}from'@crypto-api/db/src/util.js';import{createTextData}from'./create-text-data.js';function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}function _iterableToArrayLimit(arr,i){var _i=arr==null?null:typeof Symbol!=="undefined"&&arr[Symbol.iterator]||arr["@@iterator"];if(_i==null)return;var _arr=[];var _n=true;var _d=false;var _s,_e;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}_asyncToGenerator(regeneratorRuntime.mark(function _callee(){var commandActions,client,initCommands,writeTypes,typesOfWrite,coinName,coinName1,coinApi,coinCompare,amount,date,hour,hourIdx,hourText,newHour,time,convertTime,numerical,text_data;return regeneratorRuntime.wrap(function _callee$(_ctx){while(1)switch(_ctx.prev=_ctx.next){case 0:commandActions=Object.values(DynamoActionsConfiguration);_ctx.next=3;return loadDynamoDBClient();case 3:client=_ctx.sent;_ctx.next=6;return createCommands({type:'list',message:'Which [DynamoDB] commands should I excecute?',actions:commandActions});case 6:initCommands=_ctx.sent;if(!initCommands.includes('write')){_ctx.next=64;break}writeTypes=Object.values(TypesOfWrite);_ctx.next=11;return createCommands({type:'list',message:'Write New Coin OR Update Timestamp Key?',actions:writeTypes});case 11:typesOfWrite=_ctx.sent;if(!typesOfWrite.includes('new-coin')){_ctx.next=17;break}_ctx.next=15;return createCommands({type:'list',message:'For which Coin?',actions:['bitcoin','xrp','dogecoin','ethereum']});case 15:coinName=_ctx.sent;return _ctx.abrupt("return",createCryptoItem(client,coinName));case 17:if(!typesOfWrite.includes('time-stamp')){_ctx.next=64;break}_ctx.next=20;return createCommands({type:'list',message:'For which Coin?',actions:['bitcoin','xrp','dogecoin','ethereum']});case 20:coinName1=_ctx.sent;_ctx.t0=coinName1;_ctx.next=_ctx.t0==='bitcoin'?26:_ctx.t0==='xrp'?29:_ctx.t0==='dogecoin'?32:_ctx.t0==='ethereum'?35:38;break;case 26:coinApi='BITSTAMP_SPOT_BTC_USD';coinCompare='BTC';return _ctx.abrupt("break",38);case 29:coinApi='BITSTAMP_SPOT_XRP_USD';coinCompare='XRP';return _ctx.abrupt("break",38);case 32:coinApi='BITSTAMP_SPOT_DOGE_USD';coinCompare='DOGE';return _ctx.abrupt("break",38);case 35:coinApi='BITSTAMP_SPOT_ETH_USD';coinCompare='ETH';return _ctx.abrupt("break",38);case 38:_ctx.next=40;return createCommands({type:'input',message:'How many would you like to PUT? [condition: every number is added per hour]'});case 40:amount=_ctx.sent;_ctx.next=43;return createCommands({type:'input',message:'Which date would you like to PULL your data from? [REQUIRED FORMAT: yyyy-MM-ddTHH:mm:ss.fffffff]'});case 43:date=_ctx.sent;_ctx.next=46;return createCommands({type:'input',message:'Which hour should we start from?'});case 46:hour=_ctx.sent;hourIdx=0;case 48:if(!(hourIdx<Number(amount))){_ctx.next=64;break};newHour=Number(hour)+hourIdx;if(newHour<10)hourText="0".concat(newHour);else if(hourIdx>=10)hourText="".concat(newHour);time="".concat(date,"T").concat(hourText,":30:00");convertTime=convertToUnixEpoch(time);_ctx.next=56;return createNumerical({client:client,coinName:coinName1,coinapi:coinApi,coinCompare:coinCompare,limit:amount,time:time,hour:hour,convertTime:convertTime});case 56:numerical=_ctx.sent;_ctx.next=59;return createTextData(client,coinName1,amount,date,hour,convertTime,coinCompare);case 59:text_data=_ctx.sent;Promise.all([numerical,text_data]).then(function(param){var _param=_slicedToArray(param,2),numerical=_param[0],textResult=_param[1];console.log("Successfully added both [numericalResult & testResult], ")});case 61:hourIdx++;_ctx.next=48;break;case 64:case"end":return _ctx.stop()}},_callee)}))()